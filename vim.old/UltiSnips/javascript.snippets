snippet proto
${1:class_name}.prototype.${2:method_name} = function(${3}) {
	${0}
};
endsnippet
snippet fun
function ${1:function_name}(${2}) {
	${0}
}
endsnippet
snippet f "" w
function(${1}) {
	${0}
}
endsnippet
snippet vaf
var ${1:function_name} = function(${2}) {
	${0}
};
endsnippet
snippet vf
var ${1:function_name} = function $1(${2}) {
	${0}
};
endsnippet
snippet (f
(function(${1}) {
	${0}
}(${2}));
endsnippet
snippet ;fe
;(function(${1}) {
	${0}
}(${2}))
endsnippet
snippet sdf
var ${1:function_name} = function (${2:argument}) {
	${3}
	$1 = function ($2) {
		${0}
	};
};
endsnippet
snippet if
if (${1:true}) {
	${0}
}
endsnippet
snippet ife
if (${1:true}) {
	${2}
} else {
	${0}
}
endsnippet
snippet ter
${1:/* condition */} ? ${2:/* if true */} : ${0:/* if false */}
endsnippet
snippet switch
switch (${1:expression}) {
	case '${3:case}':
		${4}
		break;
	${0}
	default:
		${2}
}
endsnippet
snippet case
case '${1:case}':
	${2}
	break;
${0}
endsnippet
snippet try
try {
	${1}
} catch (${2:e}) {
	${0:/* handle error */}
}
endsnippet
snippet tryf
try {
	${1}
} catch (${2:e}) {
	${0:/* handle error */}
} finally {
	${3:/* be executed regardless of the try / catch result*/}
}
endsnippet
snippet terr
throw new Error('${1:error message}')
endsnippet
snippet ret
return ${0:result};
endsnippet
snippet for
for (var ${2:i} = 0, l = ${1:arr}.length; $2 < l; $2++) {
	var ${3:v} = $1[$2];${0:}
}
endsnippet
snippet forr
for (var ${2:i} = ${1:arr}.length - 1; $2 >= 0; $2--) {
	var ${3:v} = $1[$2];${0:}
}
endsnippet
snippet wh
while (${1:/* condition */}) {
	${0}
}
endsnippet
snippet do
do {
	${0}
} while (${1:/* condition */});
endsnippet
snippet fori
for (var ${1:prop} in ${2:object}) {
	${0:$2[$1]}
}
endsnippet
snippet :f
${1:method_name}: function (${2:attribute}) {
	${3}
},
endsnippet
snippet has
hasOwnProperty(${0})
endsnippet
snippet sing
function ${1:Singleton} (${2:argument}) {
	// the cached instance
	var instance;
	// rewrite the constructor
	$1 = function $1($2) {
		return instance;
	};
	// carry over the prototype properties
	$1.prototype = this;
	// the instance
	instance = new $1();
	// reset the constructor pointer
	instance.constructor = $1;
	${0}
	return instance;
}
endsnippet
snippet obj
function object(o) {
	function F() {}
	F.prototype = o;
	return new F();
}
endsnippet
snippet props
var ${1:my_object} = Object.defineProperties(
	${2:new Object()},
	{
		${3:property} : {
			get : function $1_$3_getter() {
				// getter code
			},
			set : function $1_$3_setter(value) {
				// setter code
			},
			value        : ${4:value},
			writeable    : ${5:boolean},
			enumerable   : ${6:boolean},
			configurable : ${0:boolean}
		}
	}
);
endsnippet
snippet prop
Object.defineProperty(
	${1:object},
	'${2:property}',
	{
		get : function $1_$2_getter() {
			// getter code
		},
		set : function $1_$2_setter(value) {
			// setter code
		},
		value        : ${3:value},
		writeable    : ${4:boolean},
		enumerable   : ${5:boolean},
		configurable : ${0:boolean}
	}
);
endsnippet
snippet /**
/**
 * ${0:description}
 *
 */
endsnippet
snippet @par
@param {${1:type}} ${2:name} ${0:description}
endsnippet
snippet @ret
@return {${1:type}} ${0:description}
endsnippet
snippet jsonp
JSON.parse(${0:jstr});
endsnippet
snippet jsons
JSON.stringify(${0:object});
endsnippet
snippet get
getElementsBy${1:TagName}('${0}')
endsnippet
snippet gett
getElementBy${1:Id}('${0}')
endsnippet
snippet by.
${1:document}.getElementsByClassName('${0:class}')
endsnippet
snippet by#
${1:document}.getElementById('${0:element ID}')
endsnippet
snippet qs
${1:document}.querySelector('${0:CSS selector}')
endsnippet
snippet qsa
${1:document}.querySelectorAll('${0:CSS selector}')
endsnippet
snippet de
debugger;
endsnippet
snippet cg
console.log("${1}", this.get('$1'));
endsnippet
snippet cc
console.log("${1}", $1);
endsnippet
snippet cj
console.log("${1}", JSON.stringify($1, null, 4));
endsnippet
snippet cl
console.log(${0});
endsnippet
snippet cd
console.debug(${0});
endsnippet
snippet ce
console.error(${0});
endsnippet
snippet ct
console.trace(${0:label});
endsnippet
snippet ctime
console.time(${0:label});
endsnippet
snippet ca
console.assert(${1:expression}, ${0:obj});
endsnippet
snippet cdir
console.dir(${0:obj});
endsnippet
snippet us
'use strict';
endsnippet
snippet timeout
setTimeout(function () {${0}}${2}, ${1:10});
endsnippet
snippet const
const ${1} = ${0};
endsnippet
snippet let
let ${1} = ${0};
endsnippet
snippet im
import ${1} from '${0}';
endsnippet
snippet cla
class ${1} {
	${0}
}
endsnippet
snippet clax
class ${1} extends ${2} {
	${0}
}
endsnippet
snippet => "Arrow function" i
(${1}) => {
	${0}
}
endsnippet
snippet af
(${1}) => {
	${0}
}
endsnippet
snippet sym
const ${1} = Symbol('${0}');
endsnippet
snippet ed
export default ${0}
endsnippet
snippet ${
	${${1}}${0}
endsnippet
snippet testssss
${0:${VISUAL: "# do something"}}
std::unique_ptr<${1:`!p
snip.rv = snip.v.text.strip("*")
`}>
endsnippet
snippet test
test('${1}', function(assert) {
	assert.ok(true);
	${0:// write your test here}
});
endsnippet
snippet then
andThen(() => {
	${0}
});
endsnippet
snippet integ
import { moduleForComponent, test } from 'ember-qunit';
import Component from 'ember-app/tests/pages/${1}';
import Ember from 'ember';
import hbs from 'htmlbars-inline-precompile';
import PageObject from 'ember-app/tests/page-object';
import wait from 'ember-test-helpers/wait';

const page = PageObject.create(Component);

moduleForComponent('${2}', 'Integration | ${3}', {
	integration: true,
	beforeEach() {
		this.on('emptyAction', function(){});
	},
	afterEach() {
		page.removeContext();
	},
});

test('${0}', function(assert) {
	page.setContext(this).render(hbs\`
		{{$2
		}}
	\`);
	assert.ok(true);
});
endsnippet
snippet i18nstub
import i18nStub from 'ember-app/tests/helpers/i18n-stub';
this.register('service:i18n', i18nStub);
this.inject.service('i18n');
endsnippet
snippet /**p
/**
 * @property $1
 */
endsnippet
snippet dep
{{#dependentProperties}}
* ${0}
* {{/dependentProperties}}
endsnippet
